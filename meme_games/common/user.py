# AUTOGENERATED! DO NOT EDIT! File to edit: ../../notebooks/user.ipynb.

# %% auto 0
__all__ = ['User', 'init_db', 'UserManager', 'user_beforeware', 'UserName', 'NameSetting']

# %% ../../notebooks/user.ipynb 1
import time
from functools import wraps
from dataclasses import dataclass
from fasthtml.common import *
from fasthtml.jupyter import JupyUvi, HTMX
import fastlite as fl
import fastcore.all as fc
from .utils import *

# %% ../../notebooks/user.ipynb 2
@dataclass
class User:
    uid: str
    name: str
    filename: Optional[str] = None

    async def set_picture(self, file: UploadFile, content_path='./user-content'):
        self.reset_picture(content_path)
        fname = f"{self.uid}_{time.time()}.{file.filename.split('.')[-1]}"
        dir = Path(content_path)
        dir.mkdir(parents=True, exist_ok=True)
        with open(dir/fname, 'wb') as f: f.write(await file.read())
        self.filename = str(fname)

    def reset_picture(self, content_path='./user-content'):
        if not self.filename: return
        path = Path(content_path)/self.filename
        path.unlink(missing_ok=True)
        self.filename = None

# %% ../../notebooks/user.ipynb 3
@fc.delegates(Database)
def init_db(filename_or_conn=':memory:', **kwargs):
    db = Database(filename_or_conn, **kwargs)
    db.create(User, pk='uid', transform=True)
    db.t.user.cls = User
    return db

# %% ../../notebooks/user.ipynb 4
class UserManager(DataManager):
    def __post_init__(self): self.users: fl.Table = self.db.t.user
    
    def create(self, uid: str=None, name: str = 'null'):
        u = User(uid or random_id(), name)
        self.users.insert(u)
        return u
    
    def get(self, uid: str): return self.users.get(uid)
    def update(self, user: User): return self.users.update(user)
    
    def get_or_create(self, sess: dict, name: str = 'null') -> User:
        sess = sess['session'] if 'session' in sess else sess
        uid = sess.setdefault('uid', random_id())
        if uid in self.users: return self.users[uid]
        return self.create(uid, name)

# %% ../../notebooks/user.ipynb 5
def user_beforeware(manager: UserManager, skip=None):
    '''Makes sure that request always contains valid user'''
    def before(req: Request): req.state.user = manager.get_or_create(req.session)
    return Beforeware(before, skip)

# %% ../../notebooks/user.ipynb 6
def UserName(r: User, u: User, is_connected=True, cls='username', **kwargs):
    cls += ' muted' if not is_connected else ''
    return Span(B(u.name) if r.uid==u.uid else u.name, dt_username = u.uid, cls=cls, **kwargs, hx_swap_oob=f"outerHTML:span[dt-username='{u.uid}']")

def NameSetting():
    return Div(
        I('edit', cls="material-icons", hx_put='/name', hx_swap='none', hx_prompt='Enter your name'),
        cls='controls')

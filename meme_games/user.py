# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/user.ipynb.

# %% auto 0
__all__ = ['User', 'init_db', 'UserManager', 'user_beforeware', 'UserName', 'NameSetting']

# %% ../notebooks/user.ipynb 1
from functools import wraps
from uuid import uuid4
from dataclasses import dataclass
from fasthtml.common import *
from fasthtml.jupyter import JupyUvi, HTMX
import fastlite as fl
import fastcore.all as fc
from .utils import *

# %% ../notebooks/user.ipynb 2
@dataclass
class User:
    uid: str
    name: str


# %% ../notebooks/user.ipynb 3
@fc.delegates(Database)
def init_db(filename_or_conn=':memory:', **kwargs):
    db = Database(filename_or_conn, **kwargs)
    db.create(User, pk='uid')
    db.t.user.cls = User
    return db

# %% ../notebooks/user.ipynb 4
class UserManager(DataManager):
    def __post_init__(self): self.users: fl.Table = self.db.t.user
    
    def create(self, uid: str=None, name: str = 'null'):
        u = User(uid or str(uuid4()), name)
        self.users.insert(u)
        return u
    
    def get(self, uid: str): return self.users.get(uid)
    def update(self, user: User): return self.users.update(user)
    
    def get_or_create(self, sess: dict, name: str = 'null') -> User:
        sess = sess['session'] if 'session' in sess else sess
        uid = sess.setdefault('uid', str(uuid4()))
        if uid in self.users: return self.users[uid]
        return self.create(uid, name)

# %% ../notebooks/user.ipynb 5
def user_beforeware(manager: UserManager, skip=None):
    '''Makes sure that request always contains valid user'''
    def before(req: Request): req.state.user = manager.get_or_create(req)
    return Beforeware(before, skip)

# %% ../notebooks/user.ipynb 6
def UserName(u: User, cls='username', **kwargs):
    return Span(u.name, dt_user = u.uid, cls=cls, **kwargs, hx_swap_oob=f'outerHTML:span[dt-user="{u.uid}"]')

def NameSetting():
    return Div(
        I('edit', cls="material-icons settings",),
        Form(Input(type='hidden', name='name'), hx_put='/name', hx_swap='none'),
        _=r"""on click get prompt('Enter your name')
                 if it != null then if it.trim() != "" then set x to it
                 make RegExp from '\\s+', 'g' called myregx
                 set x to x.replace(myregx, ' ').trim() then log x
                 put x into @value of <form input/> in me then trigger submit on <form/> in me
                 """)

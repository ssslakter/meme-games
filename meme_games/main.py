# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/main.ipynb.

# %% auto 0
__all__ = ['db', 'user_manager', 'lobby_manager', 'bwares', 'app', 'rt', 'server', 'send', 'notify_all', 'get', 'ws_fn', 'ws',
           'put']

# %% ../notebooks/main.ipynb 1
from uuid import uuid4
from typing import Callable
from dataclasses import dataclass
from fasthtml.common import *
from fasthtml.jupyter import JupyUvi, HTMX
import fastcore.all as fc
from .user import *
from .init import *
from .lobby import *
from fastlite import *

# %% ../notebooks/main.ipynb 2
db = init_db()
user_manager, lobby_manager = init_services(db)
bwares = [user_beforeware(user_manager)]
app, rt = fast_app(pico=False, before=bwares, hdrs=hdrs, exts='ws', bodykw={'hx-boost': 'true'})

# %% ../notebooks/main.ipynb 3
import asyncio

async def send(u: LobbyMember, fn, *args):
    try: await u.ws(fn(*args))
    except: u.ws = None

async def notify_all(lobby:Lobby, fn: Callable, *args):
    tasks = [send(u, fn, lobby, *args) for u in lobby.members.values() if u.is_connected]
    await asyncio.gather(*tasks)

# %% ../notebooks/main.ipynb 4
@rt("/{lobby_id}")
def get(req: Request, lobby_id: str=None):
    u: User = req.state.user
    if lobby:=lobby_manager.get_lobby(lobby_id or ''): 
        req.session['lobby_id'] = lobby.id
        return Titled(f'Lobby {lobby.id}', 
                     Members(lobby),
                     Div(hx_ext='ws', ws_connect='/game'),
                     NameSetting())
    
    lobby = lobby_manager.create_lobby(u)
    return Redirect(f"/{lobby.id}")

def ws_fn(connected=True):
    async def user_joined(sess, send):
        u = user_manager.get_or_create(sess)
        lobby = lobby_manager.get_lobby(sess.get('lobby_id'))
        if not lobby: return
        lobby.get_or_create_member(u, send if connected else None)
        await notify_all(lobby, Members)
    return user_joined
    

@app.ws('/game', conn=ws_fn(), disconn=ws_fn(connected=False))
async def ws(send): pass


# %% ../notebooks/main.ipynb 5
@rt('/name')
async def put(req: Request, name:str):
    u: User = req.state.user
    u.name = name
    user_manager.update(u)
    lobby: Lobby = lobby_manager.get_lobby(req.session.get("lobby_id"))
    if not lobby: return
    def update(lobby): return UserName(u)
    await notify_all(lobby, update)

# %% ../notebooks/main.ipynb 6
server = JupyUvi(app)
